name: Auto Release with Build CSS

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js 環境セットアップ
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'

      # 3. 依存関係インストール
      - name: Install dependencies
        run: npm ci

      # 4. ビルド実行 → build/nocturne.css 生成
      - name: Build project
        run: npm run build

      # 5. リモートタグをフェッチ
      - name: Fetch all tags
        run: git fetch --tags

      # 6. 次のタグを計算（vYYYY.N形式、年ごとに1からスタート）
      - name: Get next vYYYY.N version
        id: bump_version
        run: |
          year=$(date +'%Y')
          latest_tag=$(git ls-remote --tags origin "refs/tags/v${year}.*" | awk -F/ '{print $3}' | sort -V | tail -n 1)

          if [ -z "$latest_tag" ]; then
            next_version="v${year}.1"
          else
            current_number=${latest_tag#v${year}.}
            next_number=$((current_number+1))
            next_version="v${year}.${next_number}"
          fi

          echo "next_version=$next_version" >> $GITHUB_OUTPUT

      # 7. Git タグ作成＆push（リモートにまだない場合のみ）
      - name: Create Git tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.bump_version.outputs.next_version }}
          git push origin ${{ steps.bump_version.outputs.next_version }}

      # 8. GitHub Release 作成（build/nocturne.css を添付）
      - name: Create GitHub Release with CSS
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump_version.outputs.next_version }}
          name: Release ${{ steps.bump_version.outputs.next_version }}
          generate_release_notes: true
          files: build/nocturne.css
